Step 7. Parameterize arrays with types

Please see the example file
---------------------------------------

In Scala, you can instantiate objects, or class instances, using new. When you instantiate an object in Scala, you can parameterize it with values and types.

Parameterization means “configuring” an instance when you create it.You parameterize an instance with values by passing objects to a constructor in parentheses. For example, the following Scala code instantiates a new java.math.BigInteger and parameterizes it with the value "12345":

val big = new java.math.BigInteger("12345")

Below example, greetStrings is a value of type Array[String] (an “array of string”) that is initialized to length 3 by parameterizing it with the value 3 in the first line of code.

val greetStrings = new Array[String](3)
greetStrings(0) = "Hello"
greetStrings(1) = ", "
greetStrings(2) = "world!\n"
for (i <- 0 to 2)
	print(greetStrings(i))

Had you been in a more explicit mood, you could have specified the type of greetStrings explicitly like this also:

val greetStrings: Array[String] = new Array[String](3)

As mentioned previously, arrays in Scala are accessed by placing the index inside parentheses, not square brackets as in Java. Thus the zeroth element of the array is greetStrings(0), not greetStrings[0].

When you define a variable with val, the variable can’t be reassigned, but the object to which it refers could potentially still be changed. So in this case, you couldn’t reassign greetStrings to a different array; greetStrings will always point to the same Array[String] instance with which it was initialized. But you can change the elements of that Array[String] over time, so the array itself is mutable.

Please see the example My finding 1 in Intelli-J

Scala doesn’t technically have operator overloading, because it doesn’t actually have operators in the traditional sense. Instead, characters such as +, ,*, and / can be used in method names. Thus, when you typed 1 + 2 into the Scala interpreter in Step 1, you were actually invoking a method named + on the Int object 1, passing in 2 as a parameter.

Another important idea illustrated by this example will give you insight into why arrays are accessed with parentheses in Scala. Scala has fewer special cases than Java. Arrays are simply instances of classes like any other class in Scala. When you apply parentheses surrounding one or more values to a variable, Scala will transform the code into an invocation of a method named apply on that variable. So greetStrings(i) gets transformed into greetStrings.apply(i). Thus accessing an element of an array in Scala is simply a method call like any other

Similarly, when an assignment is made to a variable to which parentheses and one or more arguments have been applied, the compiler will transform that into an invocation of an update method that takes the arguments in parentheses as well as the object to the right of the equals sign. For example:

greetStrings(0) = "Hello"

will be transformed into:

greetStrings.update(0, "Hello")

Although the examples you’ve seen so far in this step compile and run just fine, Scala provides a more concise way to create and initialize arrays that you would normally use. It looks as shown in Listing 3.2. This code creates a new array of length three, initialized to the passed strings,"zero", "one", and "two". The compiler infers the type of the array to be Array[String], because you passed strings to it.

val numNames = Array("zero", "one", "two")

What you’re actually doing in above code is calling a factory method named apply, which creates and returns the new array. This apply method takes a variable number of arguments2 and is defined on the Array companion object like in below code.

val numNames2 = Array.apply("zero", "one", "two")

Step 8. Use lists
-----------------
As you’ve seen, a Scala array is a mutable sequence of objects that all share the same type. An Array[String] contains only strings, for example.Although you can’t change the length of an array after it is instantiated, you can change its element values. Thus, arrays are mutable objects.

For an immutable sequence of objects that share the same type you can use Scala’s List class. As with arrays, a List[String] contains only strings. Scala’s List, scala.List, differs from Java’s java.util.List type in that Scala Lists are always immutable (whereas Java Lists can be mutable).

val oneTwoThree = List(1, 2, 3)

The code in Listing 3.3 establishes a new val named oneTwoThree, initialized with a new List[Int] with the integer elements 1, 2, and 3. Because Lists are immutable, they behave a bit like Java strings: when you call a method on a list that might seem by its name to imply the list will mutate, it instead creates and returns a new list with the new value. For example, List has a method named ‘:::’ for list concatenation. Here’s how you use it:

val oneTwo = List(1, 2)
val threeFour = List(3, 4)
val oneTwoThreeFour = oneTwo ::: threeFour
println(oneTwo +" and "+ threeFour +" were not mutated.")
println("Thus, "+ oneTwoThreeFour +" is a new list.")

If you run this script, you’ll see:
List(1, 2) and List(3, 4) were not mutated.
Thus, List(1, 2, 3, 4) is a new list.

Perhaps the most common operator you’ll use with lists is ‘::’, which is pronounced “cons.” Cons prepends a new element to the beginning of an existing list, and returns the resulting list. For example,

val twoThree = List(2, 3)
val oneTwoThree = 1 :: twoThree

Given that a shorthand way to specify an empty list is Nil, one way to initialize new lists is to string together elements with the cons operator, with
Nil as the last element. For example, the following script will produce the same output as the previous one, “List(1, 2, 3)”:

val oneTwoThree = 1 :: 2 :: 3 :: Nil
println(oneTwoThree)

Must please see the table in PDF for more operations.


Step 9. Use tuples
------------------
Like lists, tuples are immutable, but unlike lists, tuples can contain different types of elements. Whereas a list might be a List[Int] or a List[String], a tuple could contain both an integer and a string at the same time.

it is simple: to instantiate a new tuple that holds some objects, just place the objects in parentheses, separated by commas. Once you have a tuple instantiated, you can access its elements individually with a dot, underscore

val pair = (99, "Luftballons")
println(pair._1)
println(pair._2)

you create a new tuple that contains the integer 99, as its first element, and the string, "Luftballons", as its second element. Scala infers the type of the tuple to be Tuple2[Int, String], and gives that type to the variable pair as well.

The actual type of a tuple depends on the number of elements it contains and the types of those elements. Thus, the type of (99, "Luftballons") is Tuple2[Int, String]. 

The type of ('u', 'r', "the", 1, 4, "me")  is Tuple6[Char, Char, String, Int, Int, String].

Although conceptually you could create tuples of any length, currently the Scala library only defines them up to Tuple22.

Step 10. Use sets and maps
--------------------------
Arrays are always mutable, lists are always immutable. Scala also provides mutable and immutable alternatives for sets and maps, but uses the same simple names for both versions. For sets and maps, Scala models mutability in the class hierarchy.

For example, the Scala API contains a base trait for sets, where a trait is similar to a Java interface. (You’ll find out more about traits in Chapter 12.) Scala then provides two subtraits, one for mutable sets and another for immutable sets.

These three traits(picture in PDF) all share the same simple name, Set. Their fully qualified names differ, however, because each resides in a different package.

Concrete set classes in the Scala API, such as the HashSet classes extend either the mutable or immutable Set trait.Thus, if you want to use a HashSet, you can choose between mutable and immutable varieties depending upon your needs.

Set does not allow duplicates.

To add a new element to a set, you call + on the set, passing in the new element.Both mutable and immutable sets offer a + method, but their behavior differs. Whereas a mutable set will add the element to itself, an immutable set will create and return a new set with the element added.

If you want a mutable set, you’ll need to use an import

import scala.collection.mutable.Set
val movieSet = Set("Hitch", "Poltergeist")
movieSet += "Shrek"
println(movieSet)

Occasionally you may want an explicit set class. Fortunately, the syntax is similar. Simply import that class you need, and use the factory method on its companion object.

import scala.collection.immutable.HashSet
val hashSet = HashSet("Tomatoes", "Chilies")
println(hashSet + "Coriander")

Another useful collection class in Scala is Map. As with sets, Scala provides mutable and immutable versions of Map. The class hierarchy for maps looks a lot like the one for sets. There’s a base Map trait in package scala.collection, and two subtrait Maps: a mutable Map in scala.collection.mutable and an immutable one in scala.collection.immutable.

you add key/value pairs to the map using the > and += methods

import scala.collection.mutable.Map
val treasureMap = Map[Int, String]()
treasureMap += (1 -> "Go to island.")
treasureMap += (2 -> "Find big X on ground.")
treasureMap += (3 -> "Dig.")
println(treasureMap(2))

If you prefer an immutable map, no import is necessary, as immutable is the default map. An example is shown in Listing 3.8:

val romanNumeral = Map(1 -> "I", 2 ->"II", 3 ->"III", 4 ->"IV", 5 ->"V")
println(romanNumeral(4))

In above code given there are no imports, you’ll get the default: a scala.collection.immutable.Map. You pass five key/value tuples to the map’s factory method, which returns an immutable Map containing the passed key/value pairs.

Step 11. Learn to recognize the functional style
------------------------------------------------
Please see the example 17,18 and 19

As mentioned in Chapter 1, Scala allows you to program in an imperative style, but encourages you to adopt a more functional style.If you are coming
to Scala from an imperative background—for example, if you are a Java programmer—one of the main challenges you may face when learning Scala is figuring out how to program in the functional style.

The first step is to recognize the difference between the two styles in code. One telltale sign is that if code contains any vars, it is probably in an imperative style. If the code contains no vars at all—i.e., it contains only vals—it is probably in a functional style. One way to move towards a functional style, therefore, is to try to program without vars.

If you’re coming from an imperative background, such as Java, C++, or C#, you may think of var as a regular variable and val as a special kind of variable.Scala encourages you to lean towards vals, but ultimately reach for the best tool given the job at hand.

The reason Scala encourages a functional style, in fact, is that the functional style can help you write more understandable, less error-prone code.

Scala is not a pure functional language that forces you to program everything in the functional style. Scala is a hybrid imperative/functional language. You may find that in some situations an imperative style is a better fit for the problem at hand, and in such cases you should not hesitate to use it. To help you learn how to program without vars, however, we’ll show you many specific examples of code with vars and how to transform those vars to vals in Chapter 7.

Step 12. Read lines from a file
-------------------------------
Please see the example in Intelli-J