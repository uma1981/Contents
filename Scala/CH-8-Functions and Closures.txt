Chapter 8
Functions and Closures
-----------------------
When programs get larger, you need some way to divide them into smaller, more manageable pieces. For dividing up control flow, Scala offers an approach familiar to all experienced programmers: divide the code into functions.

In fact, Scala offers several ways to define functions that are not present in Java.

8.1 Methods 
-----------
Below example shows two methods that together read a file with a given name and print out all lines whose length exceeds a given width. Every printed line is prefixed with the name of the file it appears in.

import scala.io.Source
object LongLines {
def processFile(filename: String, width: Int) 
{
	val source = Source.fromFile(filename)
	for (line <- source.getLines())
		processLine(filename, width, line)
}
private def processLine(filename: String,width: Int, line: String) 
{
	if (line.length > width)
		println(filename +": "+ line.trim)
}
}

object FindLongLines {
  def main(args: Array[String]) {
    val width = args(0).toInt
    for (arg <- args.drop(1))
      LongLines.processFile(arg, width)
  }
}

So far, this is very similar to what you would do in any object-oriented language. However, the concept of a function in Scala is more general than a method.

8.2 Local functions
-------------------
One problem with above approach is that all the helper function names can pollute the program namespace. In the interpreter this is not so much of a problem, but once functions are packaged in reusable classes and objects, it’s desirable to hide the helper functions from clients of a class. 

In Java, your main tool for this purpose is the private method. This private-method approach works in Scala as well, but Scala offers an additional approach: you can define functions inside other functions. Just like local variables, such local functions are visible only in their enclosing block. Here’s an example:

def processFile(filename: String, width: Int) 
{
def processLine(filename: String,width: Int, line: String) 
{
	if (line.length > width)
	println(filename +": "+ line)
}
val source = Source.fromFile(filename)
for (line <- source.getLines()) 
{
	processLine(filename, width, line)
}
}

In this example, we refactored the original LongLines version, shown in Listing 8.1, by transforming private method, processLine, into a local function of processFile. To do so we removed the private modifier, which can only be applied (and is only needed) for methods, and placed the definition of processLine inside the definition of processFile. As a local function, processLine is in scope inside processFile, but inaccessible outside.

Now that processLine is defined inside processFile, however, another improvement becomes possible. Notice how filename and width are passed unchanged into the helper function? This is not necessary, because local functions can access the parameters of their enclosing function. You can just use the parameters of the outer processLine function, as shown in

import scala.io.Source
object LongLines 
{
def processFile(filename: String, width: Int) 
 {
	def processLine(line: String) 
	{
	if (line.length > width)
	println(filename +": "+ line)
	}

	val source = Source.fromFile(filename)
	for (line <- source.getLines())
		processLine(line)
 }
}

Simpler, isn’t it? This use of an enclosing function’s parameters is a common and useful example of the general nesting Scala provides.

Please see the example in Intelli-J

8.3 First-class function
--------------------------
Scala has first-class functions. Not only can you define functions and call them, but you can write down functions as unnamed literals and then pass them around as values.

A function literal is compiled into a class that when instantiated at runtime is a function value. Thus the distinction between function literals and values is that function literals exist in the source code, whereas function values exist as objects at runtime. The distinction is much like that between classes (source code) and objects (runtime).

Here is a simple example of a function literal that adds one to a number:
(x: Int) => x + 1

The => designates that this function converts the thing on the left (any integer x) to the thing on the right (x + 1). So, this is a function mapping any integer x to x + 1.

Function values are objects, so you can store them in variables if you like. They are functions, too, so you can invoke them using the usual parentheses function-call notation. Here is an example of both activities:

scala> var increase = (x: Int) => x + 1
increase: (Int) => Int = <function1>

scala> increase(10)
res0: Int = 11

If you want to have more than one statement in the function literal, surround its body by curly braces and put one statement per line, thus forming a block. Just like a method, when the function value is invoked, all of the statements
will be executed, and the value returned from the function is whatever the expression on the last line generates.

scala> increase = (x: Int) => {
println("We")
println("are")
println("here!")
x + 1
}
increase: (Int) => Int = <function1>
scala> increase(10)
We
are
here!
res2: Int = 11

So now you have seen the nuts and bolts of function literals and function values. Many Scala libraries give you opportunities to use them. For example,a foreach method is available for all collections.It takes a function as an
argument and invokes that function on each of its elements. Here is how it can be used to print out all of the elements of a list:

scala> val someNumbers = List(-11,-10,-5,0, 5, 10)
someNumbers: List[Int] = List(-11,-10,-5,0, 5, 10)

scala> someNumbers.foreach((x: Int) => println(x))
-11
-10
-5
0
5
10

As another example, collection types also have a filter method.

scala> someNumbers.filter((x: Int) => x > 0)
res4: List[Int] = List(5, 10)

8.4 Short forms of function literals
------------------------------------
Scala provides a number of ways to leave out redundant information and write function literals more briefly. Keep your eyes open for these opportunities, because they allow you to remove clutter from your code.

One way to make a function literal more brief is to leave off the parameter types. Thus, the previous example with filter could be written like this:

scala> someNumbers.filter((x) => x > 0)
res5: List[Int] = List(5, 10)

The Scala compiler knows that x must be an integer, because it sees that you are immediately using the function to filter a list of integers (referred to by someNumbers). This is called target typing.

A second way to remove useless characters is to leave out parentheses around a parameter whose type is inferred. In the previous example, the parentheses around x are unnecessary:

scala> someNumbers.filter(x => x > 0)
res6: List[Int] = List(5, 10)

8.5 Placeholder syntax
----------------------
To make a function literal even more concise, you can use underscores as placeholders for one or more parameters, so long as each parameter appears only one time within the function literal. For example, _ > 0 is very short notation for a function that checks whether a value is greater than zero:

scala> someNumbers.filter(_ > 0)
res7: List[Int] = List(5, 10)

You can think of the underscore as a “blank” in the expression that needs to be “filled in.” This blank will be filled in with an argument to the function
each time the function is invoked. For example, given that someNumbers was initialized on page 189 to the value List(11,10,5,0, 5, 10), the
filter method will replace the blank in _ > 0 first with 11,as in 11> 0,then with 10,as in 10> 0, then with 5,as in 5> 0, and so on to the end
of the List. The function literal _ > 0, therefore, is equivalent to the slightly more verbose x => x > 0, as demonstrated here:

scala> someNumbers.filter(x => x > 0)
res8: List[Int] = List(5, 10)

Sometimes when you use underscores as placeholders for parameters, the compiler might not have enough information to infer missing parameter types. For example, suppose you write _ + _ by itself:

scala> val f = _ + _
<console>:4: error: missing parameter type for expanded function ((x$1, x$2) => x$1.$plus(x$2))
val f = _ + _

In such cases, you can specify the types using a colon, like this:

scala> val f = (_: Int) + (_: Int)
f: (Int, Int) => Int = <function2>

scala> f(5, 10)
res9: Int = 15

Note that _ + _ expands into a literal for a function that takes two parameters. This is why you can use this short form only if each parameter appears in the function literal at most once. Multiple underscores mean multiple parameters,  not reuse of a single parameter repeatedly. The first underscore represents the first parameter, the second underscore the second parameter, the third underscore the third parameter, and so on.

8.6 Partially applied functions
-------------------------------
Although the previous examples substitute underscores in place of individual parameters, you can also replace an entire parameter list with an underscore. For example, rather than writing println(_), you could write println _.
Here’s an example:

someNumbers.foreach(println _)

Scala treats this short form exactly as if you had written the following:

someNumbers.foreach(x => println(x))

Thus, the underscore in this case is not a placeholder for a single parameter. It is a placeholder for an entire parameter list. Remember that you need
to leave a space between the function name and the underscore, because otherwise the compiler will think you are referring to a different symbol.

When you use an underscore in this way, you are writing a partially applied function. In Scala, when you invoke a function, passing in any needed
arguments, you apply that function to the arguments. For example, given the following function:

scala> def sum(a: Int, b: Int, c: Int) = a + b + c
sum: (a: Int,b: Int,c: Int)Int

You could apply the function sum to the arguments 1, 2, and 3 like this:
scala> sum(1, 2, 3)
res10: Int = 6

A partially applied function is an expression in which you don’t supply all of the arguments needed by the function. Instead, you supply some, or none,of the needed arguments. For example, to create a partially applied function expression involving sum, in which you supply none of the three required arguments, you just place an underscore after “sum”. The resulting function can then be stored in a variable. Here’s an example:

scala> val a = sum _
a: (Int, Int, Int) => Int = <function3>

Given this code, the Scala compiler instantiates a function value that takes the three integer parameters missing from the partially applied function expression,
sum _, and assigns a reference to that new function value to the variable a. When you apply three arguments to this new function value, it will turn around and invoke sum, passing in those same three arguments:

scala> a(1, 2, 3)
res11: Int = 6

The Scala compiler translates the expression a(1, 2, 3) into an invocation of the function value’s apply method, passing in the three arguments 1, 2, and 3.
Thus, a(1, 2, 3) is a short form for:

scala> a.apply(1, 2, 3)
res12: Int = 6

You can also express a partially applied function by supplying some but not all of the required arguments.Here’s an example:
scala> val b = sum(1, _: Int, 3)
b: (Int) => Int = <function1>

In this case, you’ve supplied the first and last argument to sum, but the middle argument is missing. Since only one argument is missing, the Scala
compiler generates a new function class whose apply method takes one argument.

When invoked with that one argument, this generated function’s apply method invokes sum, passing in 1, the argument passed to the function, and 3. Here are some examples

scala> b(2)
res13: Int = 6

In this case, b.apply invoked sum(1, 2, 3).

scala> b(5)
res14: Int = 9

And in this case, b.apply invoked sum(1, 5, 3).


For example, instead of printing out each of the numbers in someNumbers like this:
someNumbers.foreach(println _)

You could just write:
someNumbers.foreach(println)

Attempting to use this form will cause a compilation error. Here’s an example:

scala> val c = sum
<console>:5: error: missing arguments for method sum...
follow this method with `_' if you want to treat it as a
partially applied function
val c = sum
ˆ
scala> val d = sum _
d: (Int, Int, Int) => Int = <function3>
scala> d(10, 20, 30)
res15: Int = 60

8.7 Closures
-------------
So far in this chapter, all the examples of function literals have referred only to passed parameters. For example, in (x: Int) => x > 0, the only variable
used in the function body, x > 0, is x, which is defined as a parameter to the function. You can, however, refer to variables defined elsewhere:

(x: Int) => x + more // how much more?

This function adds “more” to its argument, but what is more? If you try using this function literal by itself, without any more defined in its scope, the compiler
will complain:

scala> (x: Int) => x + more
<console>:5: error: not found: value more (x: Int) => x + more

On the other hand, the same function literal will work fine so long as there is something available named more:
scala> var more = 1
more: Int = 1

scala> val addMore = (x: Int) => x + more
addMore: (Int) => Int = <function1>
scala> addMore(10)
res17: Int = 11

The function value (the object) that’s created at runtime from this function literal is called a closure.

A closure is a function, whose return value depends on the value of one or more variables declared outside this function.

Changes made by a closure to a captured variable are visible outside the closure. Here’s an example:
scala> val someNumbers = List(-11,-10,-5,0, 5, 10)
someNumbers: List[Int] = List(-11,-10,-5,0, 5, 10)
scala> var sum = 0
sum: Int = 0

scala> someNumbers.foreach(sum += _)
scala> sum
res20: Int = -11

For example, here is a function that creates and returns “increase” closures:

def makeIncreaser(more: Int) = (x: Int) => x + more

Each time this function is called it will create a new closure. Each closure will access the more variable that was active when the closure was created.

scala> val inc1 = makeIncreaser(1)
inc1: (Int) => Int = <function1>

scala> val inc9999 = makeIncreaser(9999)
inc9999: (Int) => Int = <function1>

When you call makeIncreaser(1), a closure is created and returned that captures the value 1 as the binding for more. Similarly, when you call makeIncreaser(9999), a closure that captures the value 9999 for more is returned. When you apply these closures to arguments (in this case, there’s just one argument, x, which must be passed in), the result that comes back depends on how more was defined when the closure was created:

scala> inc1(10)
res21: Int = 11

scala> inc9999(10)
res22: Int = 10009

8.8 Special function call forms
-------------------------------
Scala supports repeated parameters,named arguments, and default arguments.

Repeated parameters
-------------------
Scala allows you to indicate that the last parameter to a function may be repeated. This allows clients to pass variable length argument lists to the function. To 
denote a repeated parameter, place an asterisk after the type of the parameter. For example:

scala> def echo(args: String*) = for (arg <- args)
		println(arg)
echo: (args: String*)Unit

Defined this way, echo can be called with zero to many String arguments:

scala> echo()
scala> echo("one")
one

scala> echo("hello", "world!")
hello
world!

Inside the function, the type of the repeated parameter is an Array of the declared type of the parameter. Thus, the type of args inside the echo function, which is declared as type “String*” is actually Array[String].

Nevertheless, if you have an array of the appropriate type, and you attempt to pass it as a repeated parameter, you’ll get a compiler error:

scala> val arr = Array("What's", "up", "doc?")
arr: Array[java.lang.String] = Array(What's, up, doc?)

scala> echo(arr)
<console>:7: error: type mismatch;
found : Array[java.lang.String]
required: String
echo(arr)
ˆ
To accomplish this, you’ll need to append the array argument with a colon and an _* symbol, like this:
scala> echo(arr: _*)
What's
up
doc?

Named arguments
---------------
In a normal function call, the arguments in the call are matched one by one in the order of the parameters of the called function:
scala> def speed(distance: Float, time: Float): Float =
distance / time
speed: (distance: Float,time: Float)Float

scala> speed(100, 10)
res28: Float = 10.0

Named arguments allow you to pass arguments to a function in a different order. The syntax is simply that each argument is preceded by a parameter name and an equals sign.

scala> speed(distance = 100, time = 10)
res29: Float = 10.0

Called with named arguments, the arguments can be reversed without changing the meaning:
scala> speed(time = 10, distance = 100)
res30: Float = 10.0

It is also possible to mix positional and named arguments. In that case, the positional arguments come first. Named arguments are most frequently used in combination with default parameter values.

Default parameter values
------------------------
Scala lets you specify default values for function parameters. The argument for such a parameter can optionally be omitted from a function call, in which
case the corresponding argument will be filled in with the default.

def printTime(out: java.io.PrintStream = Console.out) =
out.println("time = "+ System.currentTimeMillis())

If you call the function as printTime(), thus specifying no argument to be used for out, then out will be set to its default value of Console.out.
You could also call the function with an explicit output stream. For example, you could send logging to the standard error output by calling the function
as printTime(Console.err).

Default parameters are especially helpful when used in combination with named parameters. In below example function printTime2 has two optional
parameters. The out parameter has a default of Console.out, and the divisor parameter has a default value of 1.

def printTime2(out: java.io.PrintStream = Console.out, divisor: Int = 1) =
out.println("time = "+ System.currentTimeMillis()/divisor)

printTime2(out = Console.err)

To specify the time divisor, call it like this:

printTime2(divisor = 1000)

8.9 Tail recursion
------------------
Please read it in PDF